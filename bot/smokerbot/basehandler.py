import asyncio
import functools
from abc import ABC, abstractmethod
from contextvars import Context
from logging import Logger

from telethon import TelegramClient, errors
from telethon.events.common import EventCommon

from . import context


class BaseHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –¢–µ–ª–µ–≥—Ä–∞–º."""

    def __init__(self, client: TelegramClient, logger: Logger):
        self.client = client
        self.logger = logger
        self._loop = client.loop  # just convinience

    def _log_exception(
        self,
        exc: Exception,
        log_prefix: str = '',
        propagate: bool = False,
        exc_info: bool = False
    ):
        """Log an exception and optionally reraise it."""

        self.logger.error(f'{log_prefix} {exc.__class__.__name__}: {exc}',
                          exc_info=exc_info)
        if propagate:
            raise exc

    @staticmethod
    def new_context(
        task_name: str = '',
        event_handling: bool = False,
        propagate_exc: bool = False
    ):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            - `task_name` - –∏–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ
            –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è
            –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞
            - `event_handling` - –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            —Å–æ–±—ã—Ç–∏–π telethon, —Ç.–µ. –ø–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞
            `telethon.events.common.EventCommon`, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False
            - `propagate_exc` - –ø–µ—Ä–µ–≤—ã–∑–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ
            –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False

        –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏, —Ç–∞–∫ –∏ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.

        NB: –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º—ã–º
        –ø–æ—Å–ª–µ–¥–Ω–∏–º (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å).
        """

        def build_context_obj(method, self, args, kwargs) -> Context:
            """Common logic for both sync and async decorators.

            Returns new `context_obj: Context`.
            """

            if (
                event_handling
                and not (len(args) == 1 and isinstance(args[0], EventCommon))
            ):
                self._log_exception(
                    ValueError(
                        f'{context.get_log_prefix()} '
                        'Method was decorated as \'event_handling\', so it '
                        'must be called with single positional argument '
                        'of telethone \'Event\' type'
                    ),
                    log_prefix='context build error:',
                    propagate=True
                )

            ctx = Context()
            ctx.run(
                context.init_contextvars,
                task_name_val=task_name or method.__name__,
                event_val=(args[0] if event_handling else None),
                propagate_exc_val=propagate_exc
            )
            return ctx

        def decorator(method):

            if not asyncio.iscoroutinefunction(method):
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
                @functools.wraps(method)
                def sync_new_context_wrapper(
                    self: BaseHandler, *args, **kwargs
                ):

                    return (
                        build_context_obj(method, self, args, kwargs)
                        .run(method, self, *args, **kwargs)
                    )

                return sync_new_context_wrapper

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
            @functools.wraps(method)
            async def async_new_context_wrapper(
                self: BaseHandler, *args, **kwargs
            ):

                return self._loop.create_task(
                    method(self, *args, **kwargs),
                    context=build_context_obj(method, self, args, kwargs)
                )

            return async_new_context_wrapper

        return decorator

    @staticmethod
    def manage_context(method):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

        –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        `call_chain`, `method_name`, `method_args`, `method_kwargs`.
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
            - `task_name`, `call_chain`, `method_{...}` - –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
            –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
            - `propagate_exc`: bool - –ø–µ—Ä–µ–≤—ã–∑—ã–≤–∞—Ç—å –ª–∏ –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
            –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –ª–æ–≥–≥–∏—Ä—É–µ—Ç –≤—Å–µ  'non-exit' –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –û—Ç–¥–µ–ª—å–Ω–æ
        –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—é—â–∏–µ:

            - `telethon.errors.UserIsBlockedError` - –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            _on_blocked_by_peer(),
            - `MessageNotModifiedError` - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è,
            - `telethon.errors.FloodWaitError` - *experimental* –∑–∞—Å—ã–ø–∞–µ—Ç –Ω–∞
            —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π
            (–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) –º–µ—Ç–æ–¥.

        –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏, —Ç–∞–∫ –∏ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
        """

        if not asyncio.iscoroutinefunction(method):

            # Sync decorator
            @functools.wraps(method)
            def sync_manage_context_wrapper(
                self: BaseHandler, *args, **kwargs
            ):

                try:
                    tokens = context.enter_method(method, args, kwargs)
                    return method(self, *args, **kwargs)

                except Exception as exc:
                    self._log_exception(
                        exc,
                        log_prefix=f'{context.get_log_prefix()} üî∏',
                        propagate=context.propagate_exc.get()
                    )

                finally:
                    context.exit_method(*tokens)

            return sync_manage_context_wrapper

        # Async decorator
        @functools.wraps(method)
        async def async_manage_context_wrapper(
            self: BaseHandler, *args, **kwargs
        ):

            try:
                tokens = context.enter_method(method, args, kwargs)
                return await method(self, *args, **kwargs)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ UserIsBlockedError
            except errors.UserIsBlockedError:
                await self._on_blocked_by_peer()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ MessageNotModifiedError
            except errors.MessageNotModifiedError:
                pass

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ FloodWaitError
            except errors.FloodWaitError as exc:
                # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏ –∂–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                self.logger.info(
                    f'{context.get_log_prefix()} üü° got a FloodWaitError, '
                    f'sleeping for {exc.seconds} seconds'
                )
                await asyncio.sleep(exc.seconds)

                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ã–∑—ã–≤–∞–µ–º –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                self.logger.info(
                    f'{context.get_log_prefix()} is waking up '
                    'after FloodWaitError and re-calling itself.'
                )
                return await getattr(self, method.__name__)(*args, **kwargs)

            except Exception as exc:
                self._log_exception(
                    exc,
                    log_prefix=f'{context.get_log_prefix()} üî∏',
                    propagate=context.propagate_exc.get()
                )

            finally:
                context.exit_method(*tokens)

        return async_manage_context_wrapper

    @abstractmethod
    async def _on_blocked_by_peer(self):
        """Abstract UserIsBlockedError handler."""
        pass

import asyncio
import functools
from abc import ABC, abstractmethod
from logging import Logger
from contextvars import copy_context

from telethon import TelegramClient, errors
from telethon.events.common import EventCommon

from .core import Context
from . import context


class BaseHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –¢–µ–ª–µ–≥—Ä–∞–º."""

    def __init__(self, client: TelegramClient, logger: Logger):
        self.client = client
        self.logger = logger

    def _log_exception(
        self,
        exc: Exception,
        log_prefix: str = '',
        propagate: bool = False,
        exc_info: bool = False
    ):
        """Log an exception and optionally reraise it."""

        self.logger.error(f'{log_prefix} {exc.__class__.__name__}: {exc}',
                          exc_info=exc_info)
        if propagate:
            raise exc

    @staticmethod
    def build_context(
        scope: str,
        event_handling: bool = False,
        propagate_exc: bool = False
    ):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            - `scope`- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è (–æ–±–ª–∞—Å—Ç—å) —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            - `event_handling` - –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            —Å–æ–±—ã—Ç–∏–π telethon, —Ç.–µ. –ø–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞
            `telethon.events.common.EventCommon`
            - `propagate_exc` - –ø–µ—Ä–µ–≤—ã–∑–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ
            –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

        NB: –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º—ã–º
        –ø–æ—Å–ª–µ–¥–Ω–∏–º (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å).
        """

        def decorator(method):

            @functools.wraps(method)
            def wrapper(self: BaseHandler, *args, **kwargs):

                if (
                    event_handling
                    and not (
                        len(args) == 1 and isinstance(args[0], EventCommon)
                    )
                ):
                    self._log_exception(
                        ValueError(
                            f'a {method.__name__}() method was decorated as '
                            '\'event_handling\', so it must be callled with '
                            'telethone \'event\' as a single positional '
                            'argument.'
                        ),
                        log_prefix='context build error:',
                        propagate=True
                    )

                ctx = copy_context()
                ctx.run(
                    context.build_context,
                    scope_val=scope,
                    event_val=(args[0] if event_handling else None),
                    propagate_exc_val=propagate_exc
                )

                prefix = (
                    f'exp_build_context wrapper, scope={scope}, '
                    f'method={method.__name__}, after setting scope:'
                )
                context.print_vars(prefix)

                return ctx.run(method, self, *args, **kwargs)

            return wrapper

        return decorator

    @staticmethod
    def _build_context(method):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ `Context` –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –µ–≥–æ –º–µ—Ç–æ–¥—É.

        –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—á–∏–∫–æ–≤
        —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ–ª—É—á–∞—é—â–∏—Ö –æ—Ç telethon –æ–±—ä–µ–∫—Ç `event` –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º
        –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º –∞–≥—Ä—É–º–µ–Ω—Ç–æ–º.

        –°–æ–∑–¥–∞–≤–∞–µ–º—ã–π `context_obj` –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–º—É –º–µ—Ç–æ–¥—É
        –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º –∞–≥—Ä—É–º–µ–Ω—Ç–æ–º `context=context_obj`.

        ***NB!*** –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
        """
        @functools.wraps(method)
        async def wrapper(self: BaseHandler, *args, **kwargs):

            if not (args and isinstance(args[0], EventCommon)):
                raise ValueError(
                    f'build_context() decorator on {method.__name__}(): '
                    'wrapped method should only be called with a telethon '
                    'event instance as a first positional argument.'
                )

            kwargs.update({'context': Context.build_from_event(args[0])})

            return await method(self, *args, **kwargs)

        return wrapper

    @staticmethod
    def handle_exceptions(method):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –º–µ—Ç–æ–¥–∞—Ö –∫–ª–∞—Å—Å–∞.

        –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏, —Ç–∞–∫ –∏ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.

        *experimental* –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FloodError –∑–∞—Å—ã–ø–∞–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        —Å–µ–∫—É–Ω–¥ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π (–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) –º–µ—Ç–æ–¥.

        –î–µ–∫–æ—Ä–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å ***–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π***
        ***–ø–∞—Ä–∞–º–µ—Ç—Ä 'context'***, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã:

            - `log_prefix`: str - –ø—Ä–µ—Ñ–∏–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            - `propagate_exc`: bool - –ø–µ—Ä–µ–≤—ã–∑—ã–≤–∞—Ç—å –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ
            –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """

        @functools.wraps(method)
        def wrapper(self: BaseHandler, *args, **kwargs):

            call_info_string = (
                f' {method.__name__}() call with args={args}, '
                f'kwargs={kwargs}:'
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if not (
                (context := kwargs.get('context'))
                and isinstance(context, Context)
            ):
                self._log_exception(
                    ValueError('method must be called with valid \'context\' '
                               'argument in kwargs.'),
                    log_prefix=call_info_string,
                    propagate=True
                )

            log_prefix = context.log_prefix + call_info_string
            propagate_exc = context.propagate_exc

            if not asyncio.iscoroutinefunction(method):
                try:
                    return method(self, *args, **kwargs)
                except Exception as exc:
                    self._log_exception(
                        exc,
                        log_prefix=f'{log_prefix} üî∏',
                        propagate=propagate_exc
                    )
                return

            async def async_wrapper():
                try:
                    return await method(self, *args, **kwargs)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ UserIsBlockedError
                except errors.UserIsBlockedError:
                    self._is_blocked_by_peer(context=context)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ FloodWaitError
                except errors.FloodWaitError as exc:

                    # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏ –∂–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    self.logger.info(
                        f'{log_prefix} üü° got a FloodWaitError, sleeping '
                        f'for {exc.seconds} seconds'
                    )
                    await asyncio.sleep(exc.seconds)

                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ã–∑—ã–≤–∞–µ–º –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                    self.logger.info(
                        f'{log_prefix} waking up after FloodWaitError '
                        'and re-calling itself.'
                    )
                    return (
                        await getattr(self, method.__name__)(*args, **kwargs)
                    )

                except Exception as exc:
                    self._log_exception(
                        exc,
                        log_prefix=f'{log_prefix} üî∏',
                        propagate=propagate_exc
                    )

            return async_wrapper()

        return wrapper

    @abstractmethod
    def _is_blocked_by_peer(self, context: Context = None, **kwargs):
        """Abstract UserIsBlockedError handler."""
        pass

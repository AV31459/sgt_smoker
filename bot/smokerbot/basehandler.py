import asyncio
import functools
from abc import ABC, abstractmethod
from contextvars import Context, copy_context
from logging import Logger

from telethon import TelegramClient, errors
from telethon.events.common import EventCommon

from . import context


class BaseHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –¢–µ–ª–µ–≥—Ä–∞–º."""

    def __init__(self, client: TelegramClient, logger: Logger):
        self.client = client
        self.logger = logger
        self._loop = client.loop  # just convinience

    def _log_exception(
        self,
        exc: Exception,
        log_prefix: str = '',
        propagate: bool = False,
        exc_info: bool = False
    ):
        """Log an exception and optionally reraise it."""

        self.logger.error(f'{log_prefix} {exc.__class__.__name__}: {exc}',
                          exc_info=exc_info)
        if propagate:
            raise exc

    @staticmethod
    def build_context(
        scope: str,
        event_handling: bool = False,
        propagate_exc: bool = False
    ):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞.

        –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏, —Ç–∞–∫ –∏ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            - `scope`- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è (–æ–±–ª–∞—Å—Ç—å) —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            - `event_handling` - –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            —Å–æ–±—ã—Ç–∏–π telethon, —Ç.–µ. –ø–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞
            `telethon.events.common.EventCommon`
            - `propagate_exc` - –ø–µ—Ä–µ–≤—ã–∑–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ
            –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

        NB: –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º—ã–º
        –ø–æ—Å–ª–µ–¥–Ω–∏–º (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å).
        """

        def build_context_obj(method, self, args, kwargs) -> Context:
            """Common logic for both sync and async decorators."""

            if (
                event_handling
                and not (len(args) == 1 and isinstance(args[0], EventCommon))
            ):
                self._log_exception(
                    ValueError(
                        f'{context.build_log_prefix(method, args, kwargs)} '
                        'Method was decorated as \'event_handling\', so it '
                        'must be called with single positional argument '
                        'of telethone \'Event\' type'
                    ),
                    log_prefix='context build error:',
                    propagate=True
                )

            return copy_context().run(
                context.build_context,
                scope_val=scope,
                event_val=(args[0] if event_handling else None),
                propagate_exc_val=propagate_exc
            )

        def decorator(method):

            if not asyncio.iscoroutinefunction(method):
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
                @functools.wraps(method)
                def sync_wrapper(self: BaseHandler, *args, **kwargs):

                    return (
                        build_context_obj(method, self, args, kwargs)
                        .run(method, self, *args, **kwargs)
                    )

                return sync_wrapper

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
            @functools.wraps(method)
            async def async_wrapper(self: BaseHandler, *args, **kwargs):

                return self._loop.create_task(
                    method(self, *args, **kwargs),
                    context=build_context_obj(method, self, args, kwargs)
                )

            return async_wrapper

        return decorator

    @staticmethod
    def handle_exceptions(method):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –º–µ—Ç–æ–¥–∞—Ö –∫–ª–∞—Å—Å–∞.

        –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏, —Ç–∞–∫ –∏ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.

        *experimental* –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FloodError –∑–∞—Å—ã–ø–∞–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        —Å–µ–∫—É–Ω–¥ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π (–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) –º–µ—Ç–æ–¥.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:

            - {`scope`, `chat_id`, `msg_id`} - –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞
            –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
            - `propagate_exc`: bool - –ø–µ—Ä–µ–≤—ã–∑—ã–≤–∞—Ç—å –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ
            –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """

        if not asyncio.iscoroutinefunction(method):

            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
            @functools.wraps(method)
            def sync_wrapper(self: BaseHandler, *args, **kwargs):
                try:
                    return method(self, *args, **kwargs)
                except Exception as exc:
                    self._log_exception(
                        exc,
                        f'{context.build_log_prefix(method, args, kwargs)} üî∏',
                        propagate=context.propagate_exc.get()
                    )

            return sync_wrapper

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
        @functools.wraps(method)
        async def async_wrapper(self: BaseHandler, *args, **kwargs):

            log_prefix = context.build_log_prefix(method, args, kwargs)

            try:
                return await method(self, *args, **kwargs)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ UserIsBlockedError
            except errors.UserIsBlockedError:
                self._is_blocked_by_peer(context=context)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ FloodWaitError
            except errors.FloodWaitError as exc:
                # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏ –∂–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                self.logger.info(
                    f'{log_prefix} üü° got a FloodWaitError, sleeping for '
                    f'{exc.seconds} seconds'
                )
                await asyncio.sleep(exc.seconds)

                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ã–∑—ã–≤–∞–µ–º –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                self.logger.info(
                    f'{log_prefix} is waking up '
                    'after FloodWaitError and re-calling itself.'
                )
                return await getattr(self, method.__name__)(*args, **kwargs)

            except Exception as exc:
                self._log_exception(
                    exc,
                    log_prefix=f'{log_prefix} üî∏',
                    propagate=context.propagate_exc.get()
                )

        return async_wrapper

    @abstractmethod
    def _is_blocked_by_peer(self):
        """Abstract UserIsBlockedError handler."""
        pass
